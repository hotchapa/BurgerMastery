name: CI/CD Pipeline

on:
  push:
    branches:
      - backend # backend 브랜치에 푸시될 때 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: back

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t hotchapa/burger-nest:latest .

      - name: Push Docker image to Docker Hub
        run: docker push hotchapa/burger-nest:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Deploy to EC2
        run: |
          public_ip=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=your-ec2-instance-tag" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} ubuntu@$public_ip << 'EOF'
            docker login -u ${DOCKER_HUB_USERNAME} -p ${DOCKER_HUB_PASSWORD}
            docker pull hotchapa/burger-nest:latest
            docker-compose -f /path/to/your/docker-compose.yml up -d
          EOF
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
# 테스트